Index: app/src/main/java/com/haiwang/sphygmomanometerdemo/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.haiwang.sphygmomanometerdemo;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.DialogInterface;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.Message;\r\nimport android.util.Log;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.LinearLayout;\r\nimport android.widget.ListView;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport com.haiwang.bluetooth.sphygmomanometer.BleDef;\r\nimport com.haiwang.bluetooth.sphygmomanometer.event.MonitercenterManager;\r\nimport com.haiwang.bluetooth.sphygmomanometer.impl.IBluetoothStateChangeListener;\r\nimport com.haiwang.bluetooth.sphygmomanometer.impl.IDataChangeListener;\r\nimport com.haiwang.bluetooth.sphygmomanometer.model.BleDevice;\r\nimport com.haiwang.bluetooth.sphygmomanometer.model.MeasurBean;\r\nimport com.haiwang.bluetooth.sphygmomanometer.util.TypeConversion;\r\n\r\npublic class MainActivity extends AppCompatActivity implements IBluetoothStateChangeListener, IDataChangeListener, View.OnClickListener {\r\n    private static final String TAG = MainActivity.class.getSimpleName();\r\n\r\n    private Button btSearch;\r\n    private TextView tvCurConState;\r\n    private TextView tvName;\r\n    private TextView tvAddress;\r\n    private Button btConnect;\r\n    private Button btDisconnect;\r\n\r\n\r\n    private TextView tvSendResult;\r\n    private TextView tvReceive;\r\n    private LinearLayout llDeviceList;\r\n    private LinearLayout llDataSendReceive,llytConnect,llytData;\r\n    private ListView lvDevices;\r\n    private LVDevicesAdapter lvDevicesAdapter;\r\n    private static final int CONNECT_SUCCESS = 0x01;\r\n    private static final int CONNECT_FAILURE = 0x02;\r\n    private static final int DISCONNECT_SUCCESS = 0x03;\r\n    private static final int SEND_SUCCESS = 0x04;\r\n    private static final int SEND_FAILURE = 0x05;\r\n    private static final int RECEIVE_SUCCESS = 0x06;\r\n    private static final int RECEIVE_FAILURE = 0x07;\r\n    private static final int START_DISCOVERY = 0x08;\r\n    private static final int STOP_DISCOVERY = 0x09;\r\n    private static final int DISCOVERY_DEVICE = 0x0A;\r\n    private static final int DISCOVERY_OUT_TIME = 0x0B;\r\n    private static final int SELECT_DEVICE = 0x0C;\r\n    private static final int BT_OPENED = 0x0D;\r\n    private static final int BT_CLOSED = 0x0E;\r\n    private BleDevice curBluetoothDevice;  //当前连接的设备\r\n    //当前设备连接状态\r\n    private boolean curConnState = false;\r\n\r\n    @SuppressLint(\"HandlerLeak\")\r\n    private Handler mHandler = new Handler() {\r\n        @SuppressLint(\"SetTextI18n\")\r\n        @Override\r\n        public void handleMessage(@NonNull Message msg) {\r\n            super.handleMessage(msg);\r\n\r\n            switch (msg.what) {\r\n                case START_DISCOVERY:\r\n                    Log.d(TAG, \"开始搜索设备...\");\r\n                    break;\r\n\r\n                case STOP_DISCOVERY:\r\n                    Log.d(TAG, \"停止搜索设备...\");\r\n                    break;\r\n\r\n                case DISCOVERY_DEVICE:  //扫描到设备\r\n                    BleDevice bleDevice = (BleDevice) msg.obj;\r\n                    lvDevicesAdapter.addDevice(bleDevice);\r\n\r\n                    break;\r\n\r\n                case SELECT_DEVICE:\r\n                    BleDevice bluetoothDevice = (BleDevice) msg.obj;\r\n                    tvName.setText(bluetoothDevice.getName());\r\n                    tvAddress.setText(bluetoothDevice.getAddress());\r\n                    curBluetoothDevice = bluetoothDevice;\r\n                    break;\r\n\r\n                case CONNECT_FAILURE: //连接失败\r\n                    Log.d(TAG, \"连接失败\");\r\n                    tvCurConState.setText(\"连接失败\");\r\n                    curConnState = false;\r\n                    break;\r\n\r\n                case CONNECT_SUCCESS:  //连接成功\r\n                    Log.d(TAG, \"连接成功\");\r\n                    tvCurConState.setText(\"连接成功\");\r\n                    curConnState = true;\r\n                    llDataSendReceive.setVisibility(View.VISIBLE);\r\n                    llDeviceList.setVisibility(View.GONE);\r\n                    llytData.setVisibility(View.VISIBLE);\r\n                    break;\r\n\r\n                case DISCONNECT_SUCCESS:\r\n                    Log.d(TAG, \"断开成功\");\r\n                    tvCurConState.setText(\"断开成功\");\r\n                    curConnState = false;\r\n                    lvDevicesAdapter.clear();\r\n                    tvName.setText(\"\");\r\n                    tvAddress.setText(\"\");\r\n                    llDeviceList.setVisibility(View.VISIBLE);\r\n                    llytData.setVisibility(View.GONE);\r\n                    curBluetoothDevice = null;\r\n                    break;\r\n\r\n                case SEND_FAILURE: //发送失败\r\n                    String sendBufFail = (String) msg.obj;\r\n                    tvSendResult.setText(\"发送数据失败：\" + sendBufFail);\r\n                    break;\r\n\r\n                case SEND_SUCCESS:  //发送成功\r\n                    String sendBufSuc = (String) msg.obj;\r\n                    tvSendResult.setText(\"发送数据成功：\" + sendBufSuc);\r\n                    break;\r\n\r\n                case RECEIVE_FAILURE: //接收失败\r\n                    String receiveError = (String) msg.obj;\r\n                    tvReceive.setText(receiveError);\r\n                    break;\r\n                case RECEIVE_SUCCESS:  //接收成功\r\n                    String recBufSuc = (String) msg.obj;\r\n                    tvReceive.setText(tvReceive.getText().toString() + \" \\n\" + recBufSuc);\r\n                    break;\r\n\r\n                case BT_CLOSED:\r\n                    Log.d(TAG, \"系统蓝牙已关闭\");\r\n                    tvReceive.setText(tvReceive.getText().toString() + \" \\n\" + \"系统蓝牙已关闭\");\r\n                    llytConnect.setVisibility(View.GONE);\r\n                    llytData.setVisibility(View.GONE);\r\n                    tvName.setText(\"\");\r\n                    tvAddress.setText(\"\");\r\n                    lvDevicesAdapter.clear();\r\n                    llDeviceList.setVisibility(View.VISIBLE);\r\n                    llytData.setVisibility(View.GONE);\r\n                    curBluetoothDevice = null;\r\n                    break;\r\n\r\n                case BT_OPENED:\r\n                    Log.d(TAG, \"系统蓝牙已打开\");\r\n                    tvReceive.setText(tvReceive.getText().toString() + \" \\n\" + \"系统蓝牙已打开\");\r\n                    llytConnect.setVisibility(View.VISIBLE);\r\n                    llytData.setVisibility(View.GONE);\r\n                    break;\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n        initView();\r\n        iniListener();\r\n        MonitercenterManager.getInstance().registerBluetoothSettingChangeListener(this);\r\n        MonitercenterManager.getInstance().registerDataChangeListener(this);\r\n        MonitercenterManager.getInstance().initPermissions(this);\r\n        initData();\r\n    }\r\n\r\n\r\n    /**\r\n     * 初始化视图\r\n     */\r\n    private void initView() {\r\n        btSearch = findViewById(R.id.bt_search);\r\n        tvCurConState = findViewById(R.id.tv_cur_con_state);\r\n        btConnect = findViewById(R.id.bt_connect);\r\n        btDisconnect = findViewById(R.id.bt_disconnect);\r\n        tvName = findViewById(R.id.tv_name);\r\n        tvAddress = findViewById(R.id.tv_address);\r\n\r\n        tvSendResult = findViewById(R.id.tv_send_result);\r\n        tvReceive = findViewById(R.id.tv_receive_result);\r\n        llDeviceList = findViewById(R.id.ll_device_list);\r\n        llDataSendReceive = findViewById(R.id.ll_data_send_receive);\r\n        lvDevices = findViewById(R.id.lv_devices);\r\n        llytConnect = findViewById(R.id.llytConnect);\r\n        llytData = findViewById(R.id.llytData) ;\r\n    }\r\n\r\n    /**\r\n     * 初始化监听\r\n     */\r\n    private void iniListener() {\r\n        btSearch.setOnClickListener(this);\r\n        btConnect.setOnClickListener(this);\r\n        btDisconnect.setOnClickListener(this);\r\n\r\n        findViewById(R.id.bt_openbt).setOnClickListener(this);\r\n        findViewById(R.id.bt_closebt).setOnClickListener(this);\r\n        findViewById(R.id.btn_start).setOnClickListener(this);\r\n        findViewById(R.id.btn_stop).setOnClickListener(this);\r\n        findViewById(R.id.btn_setVol).setOnClickListener(this);\r\n        findViewById(R.id.btn_getVol).setOnClickListener(this);\r\n        findViewById(R.id.btn_battery).setOnClickListener(this);\r\n        findViewById(R.id.btn_getHistory).setOnClickListener(this);\r\n        findViewById(R.id.btn_clearHistory).setOnClickListener(this);\r\n        findViewById(R.id.btn_set_remind_task).setOnClickListener(this);\r\n        findViewById(R.id.btn_cancel_remind_task).setOnClickListener(this);\r\n        findViewById(R.id.btn_set_time).setOnClickListener(this);\r\n\r\n\r\n        lvDevices.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n            @Override\r\n            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {\r\n                BleDevice bleDevice = (BleDevice) lvDevicesAdapter.getItem(i);\r\n\r\n\r\n                Message message = new Message();\r\n                message.what = SELECT_DEVICE;\r\n                message.obj = bleDevice;\r\n                mHandler.sendMessage(message);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 初始化数据\r\n     */\r\n    private void initData() {\r\n        //列表适配器\r\n        lvDevicesAdapter = new LVDevicesAdapter(MainActivity.this);\r\n        lvDevices.setAdapter(lvDevicesAdapter);\r\n        llytData.setVisibility(View.GONE);\r\n        //初始化ble管理器\r\n        if (!MonitercenterManager.getInstance().checkBle(this)) {\r\n            Log.d(TAG, \"该设备不支持低功耗蓝牙\");\r\n            Toast.makeText(this, \"该设备不支持低功耗蓝牙\", Toast.LENGTH_SHORT).show();\r\n        } else {\r\n            if (!MonitercenterManager.getInstance().getBluetoothAdapterState()) {\r\n                llytConnect.setVisibility(View.GONE);\r\n                llytData.setVisibility(View.GONE);\r\n                //去打开蓝牙\r\n                MonitercenterManager.getInstance().openBluetoothAdapter();\r\n            }else {\r\n                llytConnect.setVisibility(View.VISIBLE);\r\n            }\r\n        }\r\n    }\r\n\r\n    // 在你的Activity中调用这个方法来显示弹框\r\n    private void showInputDialog() {\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        builder.setTitle(\"输入搜索条件\");\r\n\r\n        // 设置EditText为弹框的输入框\r\n        final EditText input = new EditText(this);\r\n        builder.setView(input);\r\n\r\n        // 设置确定按钮及其点击事件\r\n        builder.setPositiveButton(\"确定\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                String inputText = input.getText().toString();\r\n                // 这里处理输入的文本\r\n                llDataSendReceive.setVisibility(View.GONE);\r\n                llDeviceList.setVisibility(View.VISIBLE);\r\n                searchBtDevice(inputText);\r\n            }\r\n        });\r\n\r\n        // 设置取消按钮\r\n        builder.setNegativeButton(\"取消\", new DialogInterface.OnClickListener() {\r\n            @Override\r\n            public void onClick(DialogInterface dialog, int which) {\r\n                // 这里处理取消事件\r\n            }\r\n        });\r\n\r\n        builder.create().show();\r\n    }\r\n\r\n    //////////////////////////////////  搜索设备  /////////////////////////////////////////////////\r\n    private void searchBtDevice(String prefix) {\r\n        if (lvDevicesAdapter != null) {\r\n            lvDevicesAdapter.clear();  //清空列表\r\n        }\r\n\r\n        //开始搜索\r\n        MonitercenterManager.getInstance().startBluetoothDevicesDiscovery(prefix);\r\n    }\r\n\r\n    @Override\r\n    public void onClick(View v) {\r\n        switch (v.getId()) {\r\n            case R.id.bt_openbt: {\r\n                MonitercenterManager.getInstance().openBluetoothAdapter();\r\n            }\r\n            break;\r\n            case R.id.bt_closebt: {\r\n                MonitercenterManager.getInstance().closeBluetoothAdapter();\r\n            }\r\n            break;\r\n            case R.id.bt_search:  //搜索蓝牙\r\n                if(!MonitercenterManager.getInstance().getBluetoothAdapterState()){\r\n                    MonitercenterManager.getInstance().openBluetoothAdapter();\r\n                }else {\r\n                    showInputDialog();\r\n                }\r\n                break;\r\n\r\n            case R.id.bt_connect: //连接蓝牙\r\n                if (!curConnState) {\r\n                    if(curBluetoothDevice != null) {\r\n                        MonitercenterManager.getInstance().createBLEConnect(curBluetoothDevice.getAddress(), 15000);\r\n                    }else {\r\n                        Toast.makeText(this, \"请搜索选择设备\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n\r\n                } else {\r\n                    Toast.makeText(this, \"当前设备已连接\", Toast.LENGTH_SHORT).show();\r\n                }\r\n                break;\r\n\r\n            case R.id.bt_disconnect: //断开连接\r\n                if (curConnState) {\r\n                    if(curBluetoothDevice != null) {\r\n                        MonitercenterManager.getInstance().closeBLEConnect(curBluetoothDevice.getAddress());\r\n                    }else {\r\n                        curConnState = false ;\r\n                        Toast.makeText(this, \"当前设备未连接\", Toast.LENGTH_SHORT).show();\r\n                    }\r\n                } else {\r\n                    Toast.makeText(this, \"当前设备未连接\", Toast.LENGTH_SHORT).show();\r\n                }\r\n                break;\r\n\r\n            case R.id.btn_start: {\r\n                MonitercenterManager.getInstance().startMeasuring();\r\n            }\r\n            break;\r\n            case R.id.btn_stop: {\r\n                MonitercenterManager.getInstance().stopMeasuring();\r\n            }\r\n            break;\r\n            case R.id.btn_setVol: {\r\n                MonitercenterManager.getInstance().setVolume(1);\r\n            }\r\n            break;\r\n            case R.id.btn_getVol: {\r\n                MonitercenterManager.getInstance().getVolume();\r\n            }\r\n            break;\r\n            case R.id.btn_battery: {\r\n                MonitercenterManager.getInstance().getBattery();\r\n            }\r\n            break;\r\n            case R.id.btn_getHistory: {\r\n                MonitercenterManager.getInstance().getHistoryData(0);\r\n            }\r\n            break;\r\n            case R.id.btn_clearHistory: {\r\n                MonitercenterManager.getInstance().clearHistoryData();\r\n            }\r\n            break;\r\n            case R.id.btn_set_remind_task: {\r\n                MonitercenterManager.getInstance().setRemindTask(\"2024-06-14\", \"2024-06-14\", 14, 40);\r\n            }\r\n            break;\r\n            case R.id.btn_cancel_remind_task: {\r\n                MonitercenterManager.getInstance().cancelRemindTask();\r\n            }\r\n            break;\r\n            case R.id.btn_set_time: {\r\n                MonitercenterManager.getInstance().sendDate(\"2024-06-14 14:36:33\");\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onBluetoothAdapterStateChange(boolean currentState) {\r\n        if (!currentState) {\r\n            Message message = new Message();\r\n            message.what = BT_CLOSED;\r\n            mHandler.sendMessage(message);\r\n\r\n        } else {\r\n            Message message = new Message();\r\n            message.what = BT_OPENED;\r\n            mHandler.sendMessage(message);\r\n\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void onAdapterDiscoveryStarted() {\r\n        Message message = new Message();\r\n        message.what = START_DISCOVERY;\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onDeviceFound(BleDevice bleDevice) {\r\n        Log.i(TAG, \"onDeviceFound name:\" + bleDevice.getName() + \" address:\" + bleDevice.getAddress());\r\n        Message message = new Message();\r\n        message.what = DISCOVERY_DEVICE;\r\n        message.obj = bleDevice;\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onAdapterDiscoveryFinished() {\r\n        Message message = new Message();\r\n        message.what = STOP_DISCOVERY;\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onBleConnectedStateChanged(BleDevice bleDevice, int connectState, int reasonState) {\r\n        Log.i(TAG, \"onBleConnectedStateChanged bleDevice:\" + bleDevice.getName()\r\n                + \" address:\" + bleDevice.getAddress() + \"  connectState:\" + connectState + \"  reasonState:\" + reasonState);\r\n        switch (connectState) {\r\n            case BleDef.PROFILE_STATE_CONNECTED: {\r\n                Message message = new Message();\r\n                message.what = CONNECT_SUCCESS;\r\n                mHandler.sendMessage(message);\r\n            }\r\n            break;\r\n            case BleDef.PROFILE_STATE_DISCONNECTED: {\r\n                Message message = new Message();\r\n                message.what = DISCONNECT_SUCCESS;\r\n                message.obj = reasonState;\r\n                mHandler.sendMessage(message);\r\n            }\r\n            break;\r\n            case BleDef.PROFILE_STATE_CONNECTING: {\r\n\r\n            }\r\n            break;\r\n            case BleDef.PROFILE_STATE_DISCONNECTING: {\r\n\r\n            }\r\n            break;\r\n            case BleDef.PROFILE_STATE_CONNECTED_FAILED: {\r\n                Message message = new Message();\r\n                message.what = CONNECT_FAILURE;\r\n                mHandler.sendMessage(message);\r\n            }\r\n            break;\r\n            case BleDef.PROFILE_STATE_DISCONNECT_FAILED: {\r\n\r\n            }\r\n            break;\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onStartMeasurStateChanged(int status) {\r\n        Log.i(TAG, \"onStartMeasurStateChanged status:\" + status);\r\n        Message message = new Message();\r\n        message.what = status == 1 ? SEND_SUCCESS : SEND_FAILURE;\r\n        message.obj = status == 1 ? \"启动设备测量成功\" : \"启动设备测量失败\";\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onStopMeasurStateChanged(int status) {\r\n        Log.i(TAG, \"onStopMeasurStateChanged status:\" + status);\r\n        Message message = new Message();\r\n        message.what = status == 1 ? SEND_SUCCESS : SEND_FAILURE;\r\n        message.obj = status == 1 ? \"停止设备测量成功\" : \"停止设备测量失败\";\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onSetVolumeStateChanged(int status) {\r\n        Log.i(TAG, \"onSetVolumeStateChanged status:\" + status);\r\n        Message message = new Message();\r\n        message.what = status == 1 ? SEND_SUCCESS : SEND_FAILURE;\r\n        message.obj = status == 1 ? \"设置音量成功\" : \"设置音量失败\";\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onQueryVolumeStateChanged(int status) {\r\n        Log.i(TAG, \"onQuueryVolumeStateChanged status:\" + status);\r\n        Message message = new Message();\r\n        message.what = status == 1 ? SEND_SUCCESS : SEND_FAILURE;\r\n        message.obj = status == 1 ? \"获取音量成功\" : \"获取音量失败\";\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onSendDateStateChanged(int status) {\r\n        Log.i(TAG, \"onSendDateStateChanged status:\" + status);\r\n        Message message = new Message();\r\n        message.what = status == 1 ? SEND_SUCCESS : SEND_FAILURE;\r\n        message.obj = status == 1 ? \"设置时间成功\" : \"设置时间失败\";\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onQueryBatteryStateChanged(int status) {\r\n        Log.i(TAG, \"onQueryBatteryStateChanged status:\" + status);\r\n        Message message = new Message();\r\n        message.what = status == 1 ? SEND_SUCCESS : SEND_FAILURE;\r\n        message.obj = status == 1 ? \"查询电量成功\" : \"查询电量失败\";\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onQueryHistoryDataStateChanged(int status) {\r\n        Log.i(TAG, \"onQueryHistoryDataStateChanged status:\" + status);\r\n        Message message = new Message();\r\n        message.what = status == 1 ? SEND_SUCCESS : SEND_FAILURE;\r\n        message.obj = status == 1 ? \"查询历史记录成功\" : \"查询历史记录失败\";\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onClearHistoryDataStateChanged(int status) {\r\n        Log.i(TAG, \"onClearHistoryDataStateChanged status:\" + status);\r\n        Message message = new Message();\r\n        message.what = status == 1 ? SEND_SUCCESS : SEND_FAILURE;\r\n        message.obj = status == 1 ? \"清除历史记录成功\" : \"清除历史记录失败\";\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onUpdateRemindTaskStateChanged(int status) {\r\n        Log.i(TAG, \"onUpdateRemindTaskStateChanged status:\" + status);\r\n        Message message = new Message();\r\n        message.what = status == 1 ? SEND_SUCCESS : SEND_FAILURE;\r\n        message.obj = status == 1 ? \"设置提醒任务成功\" : \"设置提醒任务失败\";\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onCancelRemindTaskStateChanged(int status) {\r\n        Log.i(TAG, \"onCancelRemindTaskStateChanged status:\" + status);\r\n        Message message = new Message();\r\n        message.what = status == 1 ? SEND_SUCCESS : SEND_FAILURE;\r\n        message.obj = status == 1 ? \"取消提醒任务成功\" : \"取消提醒任务失败\";\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onHistoryData(MeasurBean measurBean) {\r\n        Log.i(TAG, \"onHistoryData \");\r\n        String history = \"sys1:\" + measurBean.sys1 + \" sys2:\" + measurBean.sys2 +\r\n                \" dia:\" + measurBean.dia + \" bpm:\" + measurBean.bpm + \" fib:\" + measurBean.afib + \" ihb:\" + measurBean.ihb +\r\n                \" as:\" + measurBean.as + \" userId:\" + measurBean.userId + \" year:\" + measurBean.year + \" month:\" + measurBean.month + \" day:\" + measurBean.day +\r\n                \" hour:\" + measurBean.hour + \" min:\" + measurBean.min + \" sec:\" + measurBean.sec + \" state:\" + measurBean.state + \" battery:\" + measurBean.battery +\r\n                \" pMode:\" + measurBean.pMode + \" rssi:\" + measurBean.rssi;\r\n\r\n        Message message = new Message();\r\n        message.what = RECEIVE_SUCCESS;\r\n        message.obj = \"接收历史记录:\" + history;\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onMeasurData(MeasurBean measurBean) {\r\n        Log.i(TAG, \"onMeasurData \");\r\n        String history = \"sys1:\" + measurBean.sys1 + \" sys2:\" + measurBean.sys2 +\r\n                \" dia:\" + measurBean.dia + \" bpm:\" + measurBean.bpm + \" fib:\" + measurBean.afib + \" ihb:\" + measurBean.ihb +\r\n                \" as:\" + measurBean.as + \" userId:\" + measurBean.userId + \" year:\" + measurBean.year + \" month:\" + measurBean.month + \" day:\" + measurBean.day +\r\n                \" hour:\" + measurBean.hour + \" min:\" + measurBean.min + \" sec:\" + measurBean.sec + \" state:\" + measurBean.state + \" battery:\" + measurBean.battery +\r\n                \" pMode:\" + measurBean.pMode + \" rssi:\" + measurBean.rssi;\r\n\r\n        Message message = new Message();\r\n        message.what = RECEIVE_SUCCESS;\r\n        message.obj = \"接收当前测量记录:\" + history;\r\n        mHandler.sendMessage(message);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onMeasurPressureValue(double value) {\r\n        Log.i(TAG, \"onMeasurPressureValue value：\" + value);\r\n        Message message = new Message();\r\n        message.what = RECEIVE_SUCCESS;\r\n        message.obj = \"接收当前压力值:\" + value;\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onBattery(int battery) {\r\n        Log.i(TAG, \"onBattery battery：\" + battery);\r\n        Message message = new Message();\r\n        message.what = RECEIVE_SUCCESS;\r\n        message.obj = \"接收电量:\" + battery;\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onVolume(int volume) {\r\n        Log.i(TAG, \"onVolume volume：\" + volume);\r\n        Message message = new Message();\r\n        message.what = RECEIVE_SUCCESS;\r\n        message.obj = \"接收音量:\" + volume;\r\n        mHandler.sendMessage(message);\r\n    }\r\n\r\n    @Override\r\n    public void onError(int error) {\r\n        Log.i(TAG, \"onError error：\" + error);\r\n        Message message = new Message();\r\n        message.what = RECEIVE_SUCCESS;\r\n        message.obj = \"错误码:\" + error;\r\n        mHandler.sendMessage(message);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/haiwang/sphygmomanometerdemo/MainActivity.java b/app/src/main/java/com/haiwang/sphygmomanometerdemo/MainActivity.java
--- a/app/src/main/java/com/haiwang/sphygmomanometerdemo/MainActivity.java	(revision c3a39b00330bbea701a223f987131feb86eb032b)
+++ b/app/src/main/java/com/haiwang/sphygmomanometerdemo/MainActivity.java	(date 1718362783802)
@@ -134,12 +134,12 @@
                     break;
                 case RECEIVE_SUCCESS:  //接收成功
                     String recBufSuc = (String) msg.obj;
-                    tvReceive.setText(tvReceive.getText().toString() + " \n" + recBufSuc);
+                    tvReceive.setText( recBufSuc+ " \n" + tvReceive.getText().toString());
                     break;
 
                 case BT_CLOSED:
                     Log.d(TAG, "系统蓝牙已关闭");
-                    tvReceive.setText(tvReceive.getText().toString() + " \n" + "系统蓝牙已关闭");
+                    tvReceive.setText( "系统蓝牙已关闭"+ " \n" + tvReceive.getText().toString());
                     llytConnect.setVisibility(View.GONE);
                     llytData.setVisibility(View.GONE);
                     tvName.setText("");
@@ -152,7 +152,7 @@
 
                 case BT_OPENED:
                     Log.d(TAG, "系统蓝牙已打开");
-                    tvReceive.setText(tvReceive.getText().toString() + " \n" + "系统蓝牙已打开");
+                    tvReceive.setText( "系统蓝牙已打开"+ " \n" +  tvReceive.getText().toString());
                     llytConnect.setVisibility(View.VISIBLE);
                     llytData.setVisibility(View.GONE);
                     break;
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision c3a39b00330bbea701a223f987131feb86eb032b)
+++ b/.idea/misc.xml	(date 1718590518798)
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"disableWrapperSourceDistributionNotification\" value=\"true\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleHome\" value=\"$USER_HOME$/.gradle/wrapper/dists/gradle-6.5-bin/6nifqtx7604sqp1q6g8wikw7p/gradle-6.5\" />\r\n        <option name=\"gradleJvm\" value=\"1.8 (2)\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n            <option value=\"$PROJECT_DIR$/sphygmomanometer_ble\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n        <option name=\"useQualifiedModuleNames\" value=\"true\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision c3a39b00330bbea701a223f987131feb86eb032b)
+++ b/.idea/gradle.xml	(date 1717656079393)
@@ -4,12 +4,11 @@
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
-        <option name="testRunner" value="PLATFORM" />
-        <option name="disableWrapperSourceDistributionNotification" value="true" />
+        <option name="testRunner" value="GRADLE" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
         <option name="gradleHome" value="$USER_HOME$/.gradle/wrapper/dists/gradle-6.5-bin/6nifqtx7604sqp1q6g8wikw7p/gradle-6.5" />
-        <option name="gradleJvm" value="1.8 (2)" />
+        <option name="gradleJvm" value="#JAVA_HOME" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
@@ -17,8 +16,6 @@
             <option value="$PROJECT_DIR$/sphygmomanometer_ble" />
           </set>
         </option>
-        <option name="resolveModulePerSourceSet" value="false" />
-        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Project-wide Gradle settings.\r\n# IDE (e.g. Android Studio) users:\r\n# Gradle settings configured through the IDE *will override*\r\n# any settings specified in this file.\r\n# For more details on how to configure your build environment visit\r\n# http://www.gradle.org/docs/current/userguide/build_environment.html\r\n# Specifies the JVM arguments used for the daemon process.\r\n# The setting is particularly useful for tweaking memory settings.\r\norg.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8\r\n# When configured, Gradle will run in incubating parallel mode.\r\n# This option should only be used with decoupled projects. More details, visit\r\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\r\n# org.gradle.parallel=true\r\n# AndroidX package structure to make it clearer which packages are bundled with the\r\n# Android operating system, and which are packaged with your app\"s APK\r\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\r\nandroid.useAndroidX=true\r\n# Automatically convert third-party libraries to use AndroidX\r\nandroid.enableJetifier=true
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle.properties b/gradle.properties
--- a/gradle.properties	(revision c3a39b00330bbea701a223f987131feb86eb032b)
+++ b/gradle.properties	(date 1717656099803)
@@ -6,7 +6,7 @@
 # http://www.gradle.org/docs/current/userguide/build_environment.html
 # Specifies the JVM arguments used for the daemon process.
 # The setting is particularly useful for tweaking memory settings.
-org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
+org.gradle.jvmargs=-Xmx512m -Dfile.encoding=UTF-8
 # When configured, Gradle will run in incubating parallel mode.
 # This option should only be used with decoupled projects. More details, visit
 # http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
